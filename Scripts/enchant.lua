if not loadStatFile then
	dofile("statdesc.lua")
end
loadStatFile("stat_descriptions.txt")

local lab = {
	[32] = "NORMAL",
	[53] = "CRUEL",
	[66] = "MERCILESS",
	[75] = "ENDGAME",
	[83] = "DEDICATION",
}
local sourceOrder = { "NORMAL", "CRUEL", "MERCILESS", "ENDGAME", "DEDICATION", "ENKINDLING", "INSTILLING", "HARVEST", "HEIST" }

local function doLabEnchantment(fileName, group)
	local byDiff = { }
	for _, mod in ipairs(dat("Mods"):GetRowList("GenerationType", 10)) do
		if mod.Family[1].Id == group and mod.SpawnWeights[1] > 0 then
			local stats, orders = describeMod(mod)
			local diff = lab[mod.Level]
			byDiff[diff] = byDiff[diff] or { }
			table.insert(byDiff[diff], stats)
		end
	end
	local out = io.open(fileName, "w")
	out:write('-- This file is automatically generated, do not edit!\n')
	out:write('-- Item data (c) Grinding Gear Games\n\nreturn {\n')
	for _, diff in ipairs(sourceOrder) do
		if byDiff[diff] then
			out:write('\t["'..diff..'"] = {\n')
			for _, stats in ipairs(byDiff[diff]) do
				out:write('\t\t"'..table.concat(stats, '/')..'",\n')
			end
			out:write('\t},\n')
		end
	end
	out:write('}')
	out:close()
end

doLabEnchantment("../../Data/EnchantmentBoots.lua", "ConditionalBuffEnchantment")
doLabEnchantment("../../Data/EnchantmentGloves.lua", "TriggerEnchantment")
doLabEnchantment("../../Data/EnchantmentBelt.lua", "BuffEnchantment")

local function doOtherEnchantment(fileName, groupsList)
	local byDiff = { }
	for generation in pairs(groupsList) do
		for _, mod in ipairs(dat("Mods"):GetRowList("GenerationType", generation)) do
			if groupsList[generation][mod.Family[1].Id] then
				local stats, orders = describeMod(mod)
				local diff = groupsList[generation][mod.Family[1].Id]
				byDiff[diff] = byDiff[diff] or { }
				table.insert(byDiff[diff], stats)
			end
		end
	end
	local out = io.open(fileName, "w")
	out:write('-- This file is automatically generated, do not edit!\n')
	out:write('-- Item data (c) Grinding Gear Games\n\nreturn {\n')
	for _, diff in ipairs(sourceOrder) do
		if byDiff[diff] then
			out:write('\t["'..diff..'"] = {\n')
			for _, stats in ipairs(byDiff[diff]) do
				out:write('\t\t"'..table.concat(stats, '/')..'",\n')
			end
			out:write('\t},\n')
		end
	end
	out:write('}')
	out:close()
end

-- Harvest flask enchants stat descriptions don't read properly yet
doOtherEnchantment("../../Data/EnchantmentFlask.lua", { --[3] = { ["FlaskEnchantment"] = "HARVEST" },
	[21] = { ["FlaskEnchantment"] = "ENKINDLING" },
	[22] = { ["FlaskEnchantment"] = "INSTILLING" } })
doOtherEnchantment("../../Data/EnchantmentBody.lua", { [3] = { ["AlternateArmourQuality"] = "HARVEST", ["EnchantmentHeistArmour"] = "HEIST" } })
doOtherEnchantment("../../Data/EnchantmentWeapon.lua", { [3] = { ["AlternateWeaponQuality"] = "HARVEST", ["EnchantmentHeistWeapon"] = "HEIST" } })

local skillMap = {
	["Summone?d?RagingSpirit"] = "Summon Raging Spirit",
	["SpiritOffering"] = "Spirit Offering",
	["Discharge"] = "Discharge",
	["AncestorTotem[^S][^l]"] = "Ancestral Protector",
	["AncestorTotemSlamMelee"] = "Ancestral Warchief",
	["AnimateGuardian"] = "Animate Guardian",
	["AnimateWeapon"] = "Animate Weapon",
	["BlinkArrow"] = "Blink Arrow",
	["ConversionTrap"] = "Conversion Trap",
	["MirrorArrow"] = "Mirror Arrow",
	["Spectre"] = "Raise Spectre",
	["Zombie"] = "Raise Zombie",
	["ChaosGolem"] = "Summon Chaos Golem",
	["FlameGolem"] = "Summon Flame Golem",
	["IceGolem"] = "Summon Ice Golem",
	["LightningGolem"] = "Summon Lightning Golem",
	["StoneGolem"] = "Summon Stone Golem",
	["Skeleton"] = "Summon Skeletons",
	["Bladefall"] = "Bladefall",
	["BlastRain"] = "Blast Rain",
	["ChargedAttack"] = "Blade Flurry",
	["Desecrate"] = "Desecrate",
	["DetonateDead"] = "Detonate Dead",
	["DevouringTotem"] = "Devouring Totem",
	["DominatingBlow"] = "Dominating Blow",
	["FireBeam"] = "Scorching Ray",
	["Firestorm"] = "Firestorm",
	["FreezeMine"] = "Freeze Mine",
	["EnchantmentFrenzy"] = "Frenzy",
	["GroundSlam"] = "Ground Slam",
	["HeavyStrike"] = "Heavy Strike",
	["IceSpear"] = "Ice Spear",
	["ImmortalCall"] = "Immortal Call",
	["Incinerate"] = "Incinerate",
	["KineticBlast"] = "Kinetic Blast",
	["LightningArrow"] = "Lightning Arrow",
	["ChargedDash"] = "Charged Dash",
	["PhaseRun"] = "Phase Run",
	["Puncture"] = "Puncture",
	["RejuvinationTotem"] = "Rejuvenation Totem",
	["ShockNova"] = "Shock Nova",
	["SpectralThrow"] = "Spectral Throw",
	["TectonicSlam"] = "Tectonic Slam",
	["VolatileDead"] = "Volatile Dead",
	["BoneLance"] = "Unearth",
	["CorpseEruption"] = "Cremation",
	["PowerSiphon"] = "Power Siphon",
	["Smite"] = "Smite",
	["ConsecratedPath"] = "Consecrated Path",
	["ScourgeArrow"] = "Scourge Arrow",
	["HolyRelic"] = "Summon Holy Relic",
	["HeraldOfAgony"] = "Herald of Agony",
	["HeraldOfPurity"] = "Herald of Purity",
	["Bane"] = "Bane",
	["DivineIre"] = "Divine Ire",
	["PurifyingFlame"] = "Purifying Flame",
	["Soulrend"] = "Soulrend",
	["StormBurst"] = "Storm Burst",
	["CarrionGolem"] = "Summon Carrion Golem",
	["Steelskin"] = "Steelskin",
	["[^d]Dash"] = "Dash",
	["Bladestorm"] = "Bladestorm",
	["Perforate"] = "Perforate",
	["Frostblink"] = "Frostblink",
	["ChainHook"] = "Chain Hook",
	["Berserk"] = "Berserk",
	["WitheringStep"] = "Withering Step",
	["SnappingAdder"] = "Venom Gyre",
	["PlagueBearer"] = "Plague Bearer",
	["SummonSkitterbots"] = "Summon Skitterbots",
	["ArtilleryBallista"] = "Artillery Ballista",
	["ArcaneCloak"] = "Arcane Cloak",
	["KineticBolt"] = "Kinetic Bolt",
	["BladeBlast"] = "Blade Blast",
	["RuneBlast"] = "Stormbind",
	["Spellslinger"] = "Spellslinger",
	["AncestralCry"] = "Ancestral Cry",
	["EnduringCry"] = "Enduring Cry",
	["SeismicCry"] = "Seismic Cry",
	["Sunder"] = "Sunder",
	["Earthshatter"] = "Earthshatter",
	["ArcanistBrand"] = "Arcanist Brand",
	["BlazingSalvo"] = "Blazing Salvo",
	["Anger"] = "Anger",
	["Clarity"] = "Clarity",
	["Determination"] = "Determination",
	["Discipline"] = "Discipline",
	["Grace"] = "Grace",
	["Haste"] = "Haste",
	["Hatred"] = "Hatred",
	["Malevolence"] = "Malevolence",
	["Precision"] = "Precision",
	["Pride"] = "Pride",
	["Vitality"] = "Vitality",
	["Wrath"] = "Wrath",
	["Zealotry"] = "Zealotry",
	["PurityOfElements"] = "Purity of Elements",
	["PurityOfFire"] = "Purity of Fire",
	["PurityOfIce"] = "Purity of Ice",
	["PurityOfLightning"] = "Purity of Lightning",
	["MortarBarrageMine"] = "Pyroclast Mine",
	["ColdProjectileMine"] = "Icicle Mine",
	["LightningExplosionMine"] = "Stormblast Mine",
	["FleshAndStone"] = "Flesh and Stone",
	["DreadBanner"] = "Dread Banner",
	["WarBanner"] = "War Banner",
	["FrostShield"] = "Frost Shield",
	["VoidSphere"] = "Void Sphere",
	["CracklingLance"] = "Crackling Lance",
	["SigilOfPower"] = "Sigil of Power",
	["Hexblast"] = "Hexblast",
	["FlameWall"] = "Flame Wall",
	["WaterSphere"] = "Hydrosphere",
	["CorruptingFever"] = "Corrupting Fever",
	["Bloodreap"] = "Reap",
	["BladeTrap"] = "Blade Trap",
	["EyeOfWinter"] = "Eye of Winter",
	["StormRain"] = "Storm Rain",
	["RageVortex"] = "Rage Vortex",
	["ShieldCrush"] = "Shield Crush",
	["SummonedReaper"] = "Summon Reaper",
	["Boneshatter"] = "Boneshatter",
	["SpectralHelix"] = "Spectral Helix",
	["DefianceBanner"] = "Defiance Banner",
	["EnergyBlade"] = "Energy Blade",
	["TornadoShot"] = "Tornado Shot",
	["Tornado"] = "Tornado",
	["VolcanicFissure"] = "Volcanic Fissure",
	["Table Charge"] = "Shield Charge",
	["Flame Dash"] = "Flame Dash",
}

local skillMapCN = {
	["Summone?d?RagingSpirit"] = "召唤愤怒狂灵",
	["Discharge"] = "解放",
	["AncestorTotem[^S][^l]"] = "先祖卫士",
	["AncestorTotemSlamMelee"] = "先祖战士长",
	["AnimateGuardian"] = "幻化守卫",
	["AnimateWeapon"] = "幻化武器",
	["BlinkArrow"] = "闪现射击",
	["ConversionTrap"] = "迷魅陷阱",
	["MirrorArrow"] = "魅影射击",
	["Spectre"] = "召唤灵体",
	["Zombie"] = "魔卫复苏",
	["ChaosGolem"] = "召唤混沌魔像",
	["FlameGolem"] = "召唤烈焰魔像",
	["IceGolem"] = "召唤寒冰魔像",
	["LightningGolem"] = "召唤闪电魔像",
	["StoneGolem"] = "召唤巨石魔像",
	["Skeleton"] = "召唤魔侍",
	["Bladefall"] = "虚空刀雨",
	["BlastRain"] = "爆裂箭雨",
	["ChargedAttack"] = "刀刃乱舞",
	["Desecrate"] = "亵渎",
	["DetonateDead"] = "爆灵术",
	["DevouringTotem"] = "吞噬图腾",
	["DominatingBlow"] = "霸气之击",
	["FireBeam"] = "灼热光线",
	["Firestorm"] = "烈炎风暴",
	["FreezeMine"] = "Freeze Mine",
	["EnchantmentFrenzy"] = "狂怒",
	["GroundSlam"] = "裂地之击",
	["HeavyStrike"] = "重击",
	["IceSpear"] = "冰矛",
	["ImmortalCall"] = "不朽怒嚎",
	["Incinerate"] = "烧毁",
	["KineticBlast"] = "力量爆破",
	["LightningArrow"] = "闪电箭矢",
	["ChargedDash"] = "蓄力疾风闪",
	["PhaseRun"] = "暗影迷踪",
	["Puncture"] = "放血",
	["RejuvinationTotem"] = "回春图腾",
	["ShockNova"] = "闪烁新星",
	["SpectralThrow"] = "灵体投掷",
	["TectonicSlam"] = "破釜一击",
	["VolatileDead"] = "灵体火球",
	["BoneLance"] = "亵渎之矛",
	["CorpseEruption"] = "火葬",
	["PowerSiphon"] = "力量抽取",
	["Smite"] = "惩击",
	["ConsecratedPath"] = "奉献之路",
	["ScourgeArrow"] = "天灾之箭",
	["HolyRelic"] = "召唤圣物",
	["HeraldOfAgony"] = "苦痛之捷",
	["HeraldOfPurity"] = "纯净之捷",
	["Bane"] = "混沌之毒",
	["DivineIre"] = "神圣寒冰",
	["PurifyingFlame"] = "净化烈焰",
	["Soulrend"] = "裂魂术",
	["StormBurst"] = "裂风雷球",
	["CarrionGolem"] = "召唤腐化魔像",
	["Steelskin"] = "钢铁之肤",
	["[^d]Dash"] = "冲刺",
	["Bladestorm"] = "剑刃风暴",
	["Perforate"] = "凿击",
	["Frostblink"] = "冰霜闪现",
	["ChainHook"] = "钩链攻击",
	["Berserk"] = "盛怒",
	["WitheringStep"] = "凋零步",
	["SnappingAdder"] = "剧毒旋风",
	["PlagueBearer"] = "瘟疫使徒",
	["SummonSkitterbots"] = "召唤飞掠者",
	["ArtilleryBallista"] = "火力弩炮",
	["ArcaneCloak"] = "奥术斗篷",
	["KineticBolt"] = "念动飞箭",
	["BladeBlast"] = "乱剑穿心",
	["RuneBlast"] = "缚雷之纹",
	["Spellslinger"] = "法术节魔",
	["AncestralCry"] = "先祖战吼",
	["EnduringCry"] = "坚决战吼",
	["SeismicCry"] = "震地战吼",
	["Sunder"] = "残烬",
	["Earthshatter"] = "尖刺战吼",
	["ArcanistBrand"] = "奥法烙印",
	["BlazingSalvo"] = "怒炎穿心",
	["Anger"] = "愤怒",
	["Clarity"] = "清晰",
	["Determination"] = "坚定",
	["Discipline"] = "纪律",
	["Grace"] = "优雅",
	["Haste"] = "迅捷",
	["Hatred"] = "憎恨",
	["Malevolence"] = "怨毒光环",
	["Precision"] = "精准",
	["Pride"] = "尊严",
	["Vitality"] = "活力",
	["Wrath"] = "雷霆",
	["Zealotry"] = "奋锐光环",
	["PurityOfElements"] = "元素净化",
	["PurityOfFire"] = "火焰净化",
	["PurityOfIce"] = "冰霜净化",
	["PurityOfLightning"] = "闪电净化",
	["MortarBarrageMine"] = "火屑地雷",
	["ColdProjectileMine"] = "冰锥地雷",
	["LightningExplosionMine"] = "雷暴地雷",
	["FleshAndStone"] = "血肉与岩石",
	["DreadBanner"] = "恐怖之旗",
	["WarBanner"] = "战旗",
	["FrostShield"] = "冰霜护盾",
	["VoidSphere"] = "虚空法球",
	["CracklingLance"] = "电殛长枪",
	["SigilOfPower"] = "威能法印",
	["Hexblast"] = "魔蛊爆炸",
	["FlameWall"] = "烈焰之墙",
	["WaterSphere"] = "水源法球",
	["CorruptingFever"] = "腐灼热瘟",
	["Bloodreap"] = "绝命之镰",
	["BladeTrap"] = "剑刃陷阱",
	["EyeOfWinter"] = "凛冬之眼",
	["StormRain"] = "暴雨箭",
	["RageVortex"] = "怒火漩涡",
	["ShieldCrush"] = "盾牌碾压",
	["SummonedReaper"] = "召唤追命死灵",
	["Boneshatter"] = "七伤破",
	["SpectralHelix"] = "灵幻旋斩",
	["DefianceBanner"] = "抗争之旗",
	["EnergyBlade"] = "能量之刃",
	["Tornado"] = "龙卷风",
	["TornadoShot"] = "龙卷射击",
	["VolcanicFissure"] = "火山裂缝",
	["Table Charge"] = "盾猛冲锋",
	["Flame Dash"] = "烈焰冲刺",
}

local bySkill = { }
for _, mod in ipairs(dat("Mods"):GetRowList("GenerationType", 10)) do
	if mod.Family[1].Id == "SkillEnchantment" and mod.SpawnWeights[1] > 0 then
		local stats = { mod.Stat1, mod.Stat2, mod.Stat3, mod.Stat4, mod.Stat5, mod.Stat6 }
		local skill
		for _, stat in pairs(stats) do
			for _, activeSkill in ipairs(dat("ActiveSkills"):GetRowList("SkillSpecificStat", stat)) do
				local isVaal = false
				for _, skillType in ipairs(activeSkill.SkillTypes) do
					if skillType == 39 then
						isVaal = true
						break
					end
				end
				if activeSkill.Id:match("vaal") then -- Vaal Blade Vortex missing the vaal tag
					isVaal = true
				end
				if not isVaal and activeSkill.DisplayName ~= "" then
					skill = activeSkill.DisplayName
					break
				end
			end
			for _, activeSkill in ipairs(dat("ActiveSkills"):GetRowList("SecondarySkillSpecificStat", stat)) do
				local isVaal = false
				for _, skillType in ipairs(activeSkill.SkillTypes) do
					if skillType == 39 then
						isVaal = true
						break
					end
				end
				if activeSkill.Id:match("vaal") then -- Vaal Blade Vortex missing the vaal tag
					isVaal = true
				end
				if not isVaal and activeSkill.DisplayName ~= "" then
					skill = activeSkill.DisplayName
					break
				end
			end
		end
		if skill == nil then
			skill = ""
		end
		for id, name in pairs(skillMapCN) do
			if mod.Id:match(id) then
				skill = name
				break
			end
		end
		
		if skillMapCN[skill] ~= nil then
			skill = skillMapCN[skill]
		end

		local stats, orders = describeMod(mod)
		if not skill or not stats[1] then
			printf("%s\n%s", mod.Id, stats[1])
		else
			bySkill[skill] = bySkill[skill] or { }
			local diff = lab[mod.Level]
			bySkill[skill][diff] = bySkill[skill][diff] or { }
			table.insert(bySkill[skill][diff], stats)
		end
	end
end
local skillOrder = { }
for skill in pairs(bySkill) do
	table.insert(skillOrder, skill)
end
table.sort(skillOrder)
local out = io.open("../../Data/EnchantmentHelmet.lua", "w")
out:write('-- This file is automatically generated, do not edit!\n')
out:write('-- Item data (c) Grinding Gear Games\n\nreturn {\n')
for _, skill in pairs(skillOrder) do
	out:write('\t["'..skill..'"] = {\n')
	for _, diff in ipairs(sourceOrder) do
		if bySkill[skill][diff] then
			out:write('\t\t["'..diff..'"] = {\n')
			for _, stats in ipairs(bySkill[skill][diff]) do
				out:write('\t\t\t"'..table.concat(stats, '/')..'",\n')
			end
			out:write('\t\t},\n')
		end
	end
	out:write('\t},\n')
end
out:write('}')
out:close()

print("Enchantments exported.")
